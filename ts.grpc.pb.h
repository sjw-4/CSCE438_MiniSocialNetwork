// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ts.proto
#ifndef GRPC_ts_2eproto__INCLUDED
#define GRPC_ts_2eproto__INCLUDED

#include "ts.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace tinysocial {

class TinySocial final {
 public:
  static constexpr char const* service_full_name() {
    return "tinysocial.TinySocial";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tinysocial::User>> GetList(::grpc::ClientContext* context, const ::tinysocial::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tinysocial::User>>(GetListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysocial::User>> AsyncGetList(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysocial::User>>(AsyncGetListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysocial::User>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysocial::User>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    virtual ::grpc::Status Unfollow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::tinysocial::ReplyStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>> AsyncUnfollow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>>(AsyncUnfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>> PrepareAsyncUnfollow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>>(PrepareAsyncUnfollowRaw(context, request, cq));
    }
    virtual ::grpc::Status Follow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::tinysocial::ReplyStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>> AsyncFollow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>>(AsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>> PrepareAsyncFollow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>>(PrepareAsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::tinysocial::Post>> GetTimeline(::grpc::ClientContext* context, const ::tinysocial::User& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::tinysocial::Post>>(GetTimelineRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysocial::Post>> AsyncGetTimeline(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysocial::Post>>(AsyncGetTimelineRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysocial::Post>> PrepareAsyncGetTimeline(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::tinysocial::Post>>(PrepareAsyncGetTimelineRaw(context, request, cq));
    }
    virtual ::grpc::Status PostTimeline(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::tinysocial::ReplyStatus* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>> AsyncPostTimeline(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>>(AsyncPostTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>> PrepareAsyncPostTimeline(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>>(PrepareAsyncPostTimelineRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void GetList(::grpc::ClientContext* context, ::tinysocial::User* request, ::grpc::experimental::ClientReadReactor< ::tinysocial::User>* reactor) = 0;
      virtual void Unfollow(::grpc::ClientContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Unfollow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Follow(::grpc::ClientContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetTimeline(::grpc::ClientContext* context, ::tinysocial::User* request, ::grpc::experimental::ClientReadReactor< ::tinysocial::Post>* reactor) = 0;
      virtual void PostTimeline(::grpc::ClientContext* context, const ::tinysocial::NewPost* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PostTimeline(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientReaderInterface< ::tinysocial::User>* GetListRaw(::grpc::ClientContext* context, const ::tinysocial::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tinysocial::User>* AsyncGetListRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tinysocial::User>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>* AsyncUnfollowRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>* PrepareAsyncUnfollowRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>* AsyncFollowRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>* PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::tinysocial::Post>* GetTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::User& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tinysocial::Post>* AsyncGetTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::tinysocial::Post>* PrepareAsyncGetTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>* AsyncPostTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinysocial::ReplyStatus>* PrepareAsyncPostTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    std::unique_ptr< ::grpc::ClientReader< ::tinysocial::User>> GetList(::grpc::ClientContext* context, const ::tinysocial::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tinysocial::User>>(GetListRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysocial::User>> AsyncGetList(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysocial::User>>(AsyncGetListRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysocial::User>> PrepareAsyncGetList(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysocial::User>>(PrepareAsyncGetListRaw(context, request, cq));
    }
    ::grpc::Status Unfollow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::tinysocial::ReplyStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>> AsyncUnfollow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>>(AsyncUnfollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>> PrepareAsyncUnfollow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>>(PrepareAsyncUnfollowRaw(context, request, cq));
    }
    ::grpc::Status Follow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::tinysocial::ReplyStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>> AsyncFollow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>>(AsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>> PrepareAsyncFollow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>>(PrepareAsyncFollowRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::tinysocial::Post>> GetTimeline(::grpc::ClientContext* context, const ::tinysocial::User& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::tinysocial::Post>>(GetTimelineRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysocial::Post>> AsyncGetTimeline(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysocial::Post>>(AsyncGetTimelineRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysocial::Post>> PrepareAsyncGetTimeline(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::tinysocial::Post>>(PrepareAsyncGetTimelineRaw(context, request, cq));
    }
    ::grpc::Status PostTimeline(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::tinysocial::ReplyStatus* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>> AsyncPostTimeline(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>>(AsyncPostTimelineRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>> PrepareAsyncPostTimeline(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>>(PrepareAsyncPostTimelineRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void GetList(::grpc::ClientContext* context, ::tinysocial::User* request, ::grpc::experimental::ClientReadReactor< ::tinysocial::User>* reactor) override;
      void Unfollow(::grpc::ClientContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)>) override;
      void Unfollow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)>) override;
      void Follow(::grpc::ClientContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)>) override;
      void Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)>) override;
      void GetTimeline(::grpc::ClientContext* context, ::tinysocial::User* request, ::grpc::experimental::ClientReadReactor< ::tinysocial::Post>* reactor) override;
      void PostTimeline(::grpc::ClientContext* context, const ::tinysocial::NewPost* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)>) override;
      void PostTimeline(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientReader< ::tinysocial::User>* GetListRaw(::grpc::ClientContext* context, const ::tinysocial::User& request) override;
    ::grpc::ClientAsyncReader< ::tinysocial::User>* AsyncGetListRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tinysocial::User>* PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>* AsyncUnfollowRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>* PrepareAsyncUnfollowRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>* AsyncFollowRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>* PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::tinysocial::Post>* GetTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::User& request) override;
    ::grpc::ClientAsyncReader< ::tinysocial::Post>* AsyncGetTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::tinysocial::Post>* PrepareAsyncGetTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>* AsyncPostTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>* PrepareAsyncPostTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetList_;
    const ::grpc::internal::RpcMethod rpcmethod_Unfollow_;
    const ::grpc::internal::RpcMethod rpcmethod_Follow_;
    const ::grpc::internal::RpcMethod rpcmethod_GetTimeline_;
    const ::grpc::internal::RpcMethod rpcmethod_PostTimeline_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetList(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::User>* writer);
    virtual ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response);
    virtual ::grpc::Status Follow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response);
    virtual ::grpc::Status GetTimeline(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::Post>* writer);
    virtual ::grpc::Status PostTimeline(::grpc::ServerContext* context, const ::tinysocial::NewPost* request, ::tinysocial::ReplyStatus* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetList() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::User>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::tinysocial::User* request, ::grpc::ServerAsyncWriter< ::tinysocial::User>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Unfollow() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfollow(::grpc::ServerContext* context, ::tinysocial::User* request, ::grpc::ServerAsyncResponseWriter< ::tinysocial::ReplyStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_Follow() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFollow(::grpc::ServerContext* context, ::tinysocial::User* request, ::grpc::ServerAsyncResponseWriter< ::tinysocial::ReplyStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetTimeline() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::Post>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTimeline(::grpc::ServerContext* context, ::tinysocial::User* request, ::grpc::ServerAsyncWriter< ::tinysocial::Post>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PostTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_PostTimeline() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PostTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTimeline(::grpc::ServerContext* context, const ::tinysocial::NewPost* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostTimeline(::grpc::ServerContext* context, ::tinysocial::NewPost* request, ::grpc::ServerAsyncResponseWriter< ::tinysocial::ReplyStatus>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetList<WithAsyncMethod_Unfollow<WithAsyncMethod_Follow<WithAsyncMethod_GetTimeline<WithAsyncMethod_PostTimeline<Service > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetList() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackServerStreamingHandler< ::tinysocial::User, ::tinysocial::User>(
          [this] { return this->GetList(); }));
    }
    ~ExperimentalWithCallbackMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::User>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::tinysocial::User, ::tinysocial::User>* GetList() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::tinysocial::User, ::tinysocial::User>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Unfollow() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::tinysocial::User, ::tinysocial::ReplyStatus>(
          [this](::grpc::ServerContext* context,
                 const ::tinysocial::User* request,
                 ::tinysocial::ReplyStatus* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Unfollow(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Unfollow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_Follow() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::tinysocial::User, ::tinysocial::ReplyStatus>(
          [this](::grpc::ServerContext* context,
                 const ::tinysocial::User* request,
                 ::tinysocial::ReplyStatus* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->Follow(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Follow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_GetTimeline() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackServerStreamingHandler< ::tinysocial::User, ::tinysocial::Post>(
          [this] { return this->GetTimeline(); }));
    }
    ~ExperimentalWithCallbackMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::Post>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::tinysocial::User, ::tinysocial::Post>* GetTimeline() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::tinysocial::User, ::tinysocial::Post>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_PostTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_PostTimeline() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::tinysocial::NewPost, ::tinysocial::ReplyStatus>(
          [this](::grpc::ServerContext* context,
                 const ::tinysocial::NewPost* request,
                 ::tinysocial::ReplyStatus* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->PostTimeline(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithCallbackMethod_PostTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTimeline(::grpc::ServerContext* context, const ::tinysocial::NewPost* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostTimeline(::grpc::ServerContext* context, const ::tinysocial::NewPost* request, ::tinysocial::ReplyStatus* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  typedef ExperimentalWithCallbackMethod_GetList<ExperimentalWithCallbackMethod_Unfollow<ExperimentalWithCallbackMethod_Follow<ExperimentalWithCallbackMethod_GetTimeline<ExperimentalWithCallbackMethod_PostTimeline<Service > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetList() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::User>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Unfollow() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_Follow() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetTimeline() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::Post>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PostTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_PostTimeline() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PostTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTimeline(::grpc::ServerContext* context, const ::tinysocial::NewPost* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetList() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::User>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetList(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Unfollow() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnfollow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_Follow() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestFollow(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetTimeline() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::Post>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetTimeline(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PostTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_PostTimeline() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PostTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTimeline(::grpc::ServerContext* context, const ::tinysocial::NewPost* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPostTimeline(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetList() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetList(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetList(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::User>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetList() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Unfollow() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Unfollow(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Unfollow(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_Follow() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->Follow(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void Follow(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_GetTimeline() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->GetTimeline(); }));
    }
    ~ExperimentalWithRawCallbackMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::Post>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* GetTimeline() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_PostTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_PostTimeline() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->PostTimeline(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_PostTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PostTimeline(::grpc::ServerContext* context, const ::tinysocial::NewPost* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void PostTimeline(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unfollow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Unfollow() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::tinysocial::User, ::tinysocial::ReplyStatus>(std::bind(&WithStreamedUnaryMethod_Unfollow<BaseClass>::StreamedUnfollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Unfollow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unfollow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnfollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinysocial::User,::tinysocial::ReplyStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Follow : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_Follow() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::tinysocial::User, ::tinysocial::ReplyStatus>(std::bind(&WithStreamedUnaryMethod_Follow<BaseClass>::StreamedFollow, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_Follow() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Follow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedFollow(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinysocial::User,::tinysocial::ReplyStatus>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PostTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_PostTimeline() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::tinysocial::NewPost, ::tinysocial::ReplyStatus>(std::bind(&WithStreamedUnaryMethod_PostTimeline<BaseClass>::StreamedPostTimeline, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_PostTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PostTimeline(::grpc::ServerContext* context, const ::tinysocial::NewPost* request, ::tinysocial::ReplyStatus* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPostTimeline(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinysocial::NewPost,::tinysocial::ReplyStatus>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Unfollow<WithStreamedUnaryMethod_Follow<WithStreamedUnaryMethod_PostTimeline<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_GetList : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetList() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler< ::tinysocial::User, ::tinysocial::User>(std::bind(&WithSplitStreamingMethod_GetList<BaseClass>::StreamedGetList, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetList() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetList(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::User>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetList(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tinysocial::User,::tinysocial::User>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_GetTimeline : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_GetTimeline() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::tinysocial::User, ::tinysocial::Post>(std::bind(&WithSplitStreamingMethod_GetTimeline<BaseClass>::StreamedGetTimeline, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_GetTimeline() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetTimeline(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::Post>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedGetTimeline(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::tinysocial::User,::tinysocial::Post>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_GetList<WithSplitStreamingMethod_GetTimeline<Service > > SplitStreamedService;
  typedef WithSplitStreamingMethod_GetList<WithStreamedUnaryMethod_Unfollow<WithStreamedUnaryMethod_Follow<WithSplitStreamingMethod_GetTimeline<WithStreamedUnaryMethod_PostTimeline<Service > > > > > StreamedService;
};

}  // namespace tinysocial


#endif  // GRPC_ts_2eproto__INCLUDED
