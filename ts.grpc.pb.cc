// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: ts.proto

#include "ts.pb.h"
#include "ts.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace tinysocial {

static const char* TinySocial_method_names[] = {
  "/tinysocial.TinySocial/GetList",
  "/tinysocial.TinySocial/Unfollow",
  "/tinysocial.TinySocial/Follow",
  "/tinysocial.TinySocial/GetTimeline",
  "/tinysocial.TinySocial/PostTimeline",
};

std::unique_ptr< TinySocial::Stub> TinySocial::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TinySocial::Stub> stub(new TinySocial::Stub(channel));
  return stub;
}

TinySocial::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetList_(TinySocial_method_names[0], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Unfollow_(TinySocial_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Follow_(TinySocial_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetTimeline_(TinySocial_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_PostTimeline_(TinySocial_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::tinysocial::User>* TinySocial::Stub::GetListRaw(::grpc::ClientContext* context, const ::tinysocial::User& request) {
  return ::grpc::internal::ClientReaderFactory< ::tinysocial::User>::Create(channel_.get(), rpcmethod_GetList_, context, request);
}

void TinySocial::Stub::experimental_async::GetList(::grpc::ClientContext* context, ::tinysocial::User* request, ::grpc::experimental::ClientReadReactor< ::tinysocial::User>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::tinysocial::User>::Create(stub_->channel_.get(), stub_->rpcmethod_GetList_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tinysocial::User>* TinySocial::Stub::AsyncGetListRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tinysocial::User>::Create(channel_.get(), cq, rpcmethod_GetList_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tinysocial::User>* TinySocial::Stub::PrepareAsyncGetListRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tinysocial::User>::Create(channel_.get(), cq, rpcmethod_GetList_, context, request, false, nullptr);
}

::grpc::Status TinySocial::Stub::Unfollow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::tinysocial::ReplyStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Unfollow_, context, request, response);
}

void TinySocial::Stub::experimental_async::Unfollow(::grpc::ClientContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Unfollow_, context, request, response, std::move(f));
}

void TinySocial::Stub::experimental_async::Unfollow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Unfollow_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>* TinySocial::Stub::AsyncUnfollowRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocial::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_Unfollow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>* TinySocial::Stub::PrepareAsyncUnfollowRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocial::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_Unfollow_, context, request, false);
}

::grpc::Status TinySocial::Stub::Follow(::grpc::ClientContext* context, const ::tinysocial::User& request, ::tinysocial::ReplyStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Follow_, context, request, response);
}

void TinySocial::Stub::experimental_async::Follow(::grpc::ClientContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, std::move(f));
}

void TinySocial::Stub::experimental_async::Follow(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_Follow_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>* TinySocial::Stub::AsyncFollowRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocial::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>* TinySocial::Stub::PrepareAsyncFollowRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocial::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_Follow_, context, request, false);
}

::grpc::ClientReader< ::tinysocial::Post>* TinySocial::Stub::GetTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::User& request) {
  return ::grpc::internal::ClientReaderFactory< ::tinysocial::Post>::Create(channel_.get(), rpcmethod_GetTimeline_, context, request);
}

void TinySocial::Stub::experimental_async::GetTimeline(::grpc::ClientContext* context, ::tinysocial::User* request, ::grpc::experimental::ClientReadReactor< ::tinysocial::Post>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::tinysocial::Post>::Create(stub_->channel_.get(), stub_->rpcmethod_GetTimeline_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::tinysocial::Post>* TinySocial::Stub::AsyncGetTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tinysocial::Post>::Create(channel_.get(), cq, rpcmethod_GetTimeline_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::tinysocial::Post>* TinySocial::Stub::PrepareAsyncGetTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::User& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::tinysocial::Post>::Create(channel_.get(), cq, rpcmethod_GetTimeline_, context, request, false, nullptr);
}

::grpc::Status TinySocial::Stub::PostTimeline(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::tinysocial::ReplyStatus* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_PostTimeline_, context, request, response);
}

void TinySocial::Stub::experimental_async::PostTimeline(::grpc::ClientContext* context, const ::tinysocial::NewPost* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostTimeline_, context, request, response, std::move(f));
}

void TinySocial::Stub::experimental_async::PostTimeline(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::tinysocial::ReplyStatus* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_PostTimeline_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>* TinySocial::Stub::AsyncPostTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocial::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_PostTimeline_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::tinysocial::ReplyStatus>* TinySocial::Stub::PrepareAsyncPostTimelineRaw(::grpc::ClientContext* context, const ::tinysocial::NewPost& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::tinysocial::ReplyStatus>::Create(channel_.get(), cq, rpcmethod_PostTimeline_, context, request, false);
}

TinySocial::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySocial_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TinySocial::Service, ::tinysocial::User, ::tinysocial::User>(
          std::mem_fn(&TinySocial::Service::GetList), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySocial_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySocial::Service, ::tinysocial::User, ::tinysocial::ReplyStatus>(
          std::mem_fn(&TinySocial::Service::Unfollow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySocial_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySocial::Service, ::tinysocial::User, ::tinysocial::ReplyStatus>(
          std::mem_fn(&TinySocial::Service::Follow), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySocial_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TinySocial::Service, ::tinysocial::User, ::tinysocial::Post>(
          std::mem_fn(&TinySocial::Service::GetTimeline), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TinySocial_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TinySocial::Service, ::tinysocial::NewPost, ::tinysocial::ReplyStatus>(
          std::mem_fn(&TinySocial::Service::PostTimeline), this)));
}

TinySocial::Service::~Service() {
}

::grpc::Status TinySocial::Service::GetList(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::User>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySocial::Service::Unfollow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySocial::Service::Follow(::grpc::ServerContext* context, const ::tinysocial::User* request, ::tinysocial::ReplyStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySocial::Service::GetTimeline(::grpc::ServerContext* context, const ::tinysocial::User* request, ::grpc::ServerWriter< ::tinysocial::Post>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TinySocial::Service::PostTimeline(::grpc::ServerContext* context, const ::tinysocial::NewPost* request, ::tinysocial::ReplyStatus* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tinysocial

